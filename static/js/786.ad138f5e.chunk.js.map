{"version":3,"file":"static/js/786.ad138f5e.chunk.js","mappings":"2NAEA,EADqB,CAAE,KAAQ,CAAE,IAAO,MAAO,MAAS,CAAE,QAAW,gBAAiB,UAAa,SAAW,SAAY,CAAC,CAAE,IAAO,OAAQ,MAAS,CAAE,EAAK,oLAAwL,KAAQ,SAAU,MAAS,Y,UCM3WA,EAAiB,SAAwBC,EAAOC,GAClD,OAAoBC,EAAAA,cAAoBC,EAAAA,GAAUC,EAAAA,EAAAA,IAAcA,EAAAA,EAAAA,GAAc,GAAIJ,GAAQ,GAAI,CAC5FC,IAAKA,EACLI,KAAMC,MAIVP,EAAeQ,YAAc,iBAC7B,MAA4BL,EAAAA,WAAiBH,G,oECRvCS,GAAcC,EAAAA,EAAAA,GAAiB,IAwBrC,GAAeC,EAAAA,EAAAA,GAAoC,CACjDC,KAAM,2BADR,EAlBI,SAACX,GACH,OACE,kBAAMY,SAAUZ,EAAMa,aAAtB,WACE,0BACGC,EAAAA,EAAAA,IACC,qBACA,iBACA,CAACN,GACDO,EAAAA,OAGJ,0BACE,SAAC,IAAD,CAAQC,SAAS,SAAjB,0BCxBR,EAAyB,wBAAzB,EAAwD,sBAAxD,EAAqF,sBAArF,EAAoH,wBAApH,EAAuJ,0BAAvJ,EAA0L,wBAA1L,EAA8N,2BCA9N,EAA0B,yBAA1B,EAAoE,gCCepE,EAVqC,SAAChB,GACpC,OACE,gBAAKiB,UAAWC,EAAhB,UACE,gBAAKD,UAAWC,EAAhB,UACE,0BAAOlB,EAAMmB,eC0CrB,EAnCqC,SAACnB,GACpC,IAEIoB,EAFQpB,EAAMqB,YAEWC,SAASC,KAAI,SAACC,GAAD,OAAO,SAAC,EAAD,CAASL,QAASK,EAAEL,SAAcK,EAAEC,OAS7EC,EAASC,EAAAA,EAAAA,KAEjB,OACE,iBAAKV,UAAWC,EAAhB,WACE,iBAAKD,UAAWC,EAAhB,WACE,SAAC,IAAD,CAAQD,UAAWC,EAAUU,KAAM,GAAnC,gBAGA,gBAAKX,UAAWC,EAAhB,UACE,SAACQ,EAAD,CAAMG,QAAM,EAAZ,+BAEF,iBAAKZ,UAAWC,EAAhB,WACE,SAACQ,EAAD,qBADF,KACsB,SAAC,EAAD,WAGxB,gBAAKT,UAAWC,EAAhB,SAA2BE,KAC3B,gBAAKH,UAAWC,EAAhB,UACE,SAAC,EAAD,CAAgBN,SAxBF,SAACkB,GACfA,EAAOC,iBACT/B,EAAMgC,YAAYF,EAAOC,gBACzBD,EAAOC,eAAiB,aCX9B,GAAeE,EAAAA,EAAAA,KACbC,EAAAA,EAAAA,KAPoB,SAACC,GACrB,MAAO,CACLd,YAAac,EAAMd,gBAKd,UAAuBe,EAAAA,IAC9BC,EAAAA,EAFF,CAGEC,I,gICZEC,EAA6B,SAACJ,GAAD,MAC9B,CACCK,OAAQL,EAAMM,KAAKD,SAQhB,SAASH,EAAsBK,GAYpC,OAJqCR,EAAAA,EAAAA,IACnCK,EACA,GAFmCL,EAPiC,SAAClC,GACrE,IAAMwC,EAAyBxC,EAAzBwC,OAAWG,GAAjB,OAA+B3C,EAA/B,GACA,OAAKwC,GAEE,SAACE,GAAD,UAAuBC,KAFV,SAAC,KAAD,CAAUC,GAAG","sources":["../node_modules/@ant-design/icons-svg/es/asn/MobileOutlined.js","../node_modules/@ant-design/icons/es/icons/MobileOutlined.js","components/Dialogs/AddMessageForm/AddMessageForm.tsx","webpack://react-first/./src/components/Dialogs/Dialogs.module.css?1b2e","webpack://react-first/./src/components/Dialogs/Message/Message.module.css?72d0","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// This icon file is generated automatically.\nvar MobileOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M744 62H280c-35.3 0-64 28.7-64 64v768c0 35.3 28.7 64 64 64h464c35.3 0 64-28.7 64-64V126c0-35.3-28.7-64-64-64zm-8 824H288V134h448v752zM472 784a40 40 0 1080 0 40 40 0 10-80 0z\" } }] }, \"name\": \"mobile\", \"theme\": \"outlined\" };\nexport default MobileOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport MobileOutlinedSvg from \"@ant-design/icons-svg/es/asn/MobileOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar MobileOutlined = function MobileOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: MobileOutlinedSvg\n  }));\n};\n\nMobileOutlined.displayName = 'MobileOutlined';\nexport default /*#__PURE__*/React.forwardRef(MobileOutlined);","import { Button } from 'antd'\r\nimport React from 'react'\r\nimport { InjectedFormProps, reduxForm } from 'redux-form'\r\nimport { maxLengthCreator } from '../../../utilities/validators/validators'\r\nimport { Textarea, createField } from '../../common/FormsControls/FormsControls'\r\nimport { NewMessageFormValuesType } from '../Dialogs'\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\ntype NewMessageFormValuesKeysType = Extract<keyof NewMessageFormValuesType, string>\r\ntype PropsType = {}\r\nconst AddMessageForm: React.FC<\r\n  InjectedFormProps<NewMessageFormValuesType, PropsType> & PropsType\r\n> = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div>\r\n        {createField<NewMessageFormValuesKeysType>(\r\n          'Enter your message',\r\n          'newMessageBody',\r\n          [maxLength50],\r\n          Textarea,\r\n        )}\r\n      </div>\r\n      <div>\r\n        <Button htmlType='submit'>Send</Button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default reduxForm<NewMessageFormValuesType>({\r\n  form: 'dialog-add-message-form',\r\n})(AddMessageForm)\r\n","// extracted by mini-css-extract-plugin\nexport default {\"dialog\":\"Dialogs_dialog__TwiBB\",\"form\":\"Dialogs_form__ATwrH\",\"name\":\"Dialogs_name__Ywu2l\",\"avatar\":\"Dialogs_avatar__ABTYd\",\"userName\":\"Dialogs_userName__m6pgC\",\"status\":\"Dialogs_status__f1Z8d\",\"container\":\"Dialogs_container__KOpR9\"};","// extracted by mini-css-extract-plugin\nexport default {\"message\":\"Message_message__+++sH\",\"messageContent\":\"Message_messageContent__iMomm\"};","import React from 'react'\r\nimport s from './Message.module.css'\r\n\r\ntype PropsType = {\r\n  message: string\r\n}\r\nconst Message: React.FC<PropsType> = (props) => {\r\n  return (\r\n    <div className={s.message}>\r\n      <div className={s.messageContent}>\r\n        <span>{props.message}</span>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Message\r\n","import { MobileOutlined } from '@ant-design/icons'\r\nimport { Avatar, Typography } from 'antd'\r\nimport React from 'react'\r\nimport { InitialStateType } from '../../redux/dialogs-reducer'\r\nimport AddMessageForm from './AddMessageForm/AddMessageForm'\r\nimport s from './Dialogs.module.css'\r\nimport Message from './Message/Message'\r\n\r\ntype PropsType = {\r\n  dialogsPage: InitialStateType\r\n  sendMessage: (messageText: string) => void\r\n}\r\n\r\nexport type NewMessageFormValuesType = {\r\n  newMessageBody: string\r\n}\r\n\r\nconst Dialogs: React.FC<PropsType> = (props) => {\r\n  let state = props.dialogsPage\r\n\r\n  let messagesElements = state.messages.map((m) => <Message message={m.message} key={m.id} />)\r\n\r\n  let addNewMessage = (values: NewMessageFormValuesType) => {\r\n    if (values.newMessageBody) {\r\n      props.sendMessage(values.newMessageBody)\r\n      values.newMessageBody = ''\r\n    }\r\n  }\r\n\r\n  const { Text } = Typography\r\n\r\n  return (\r\n    <div className={s.container}>\r\n      <div className={s.name}>\r\n        <Avatar className={s.avatar} size={40}>\r\n          A\r\n        </Avatar>\r\n        <div className={s.userName}>\r\n          <Text strong>Andrew Sokolov</Text>\r\n        </div>\r\n        <div className={s.status}>\r\n          <Text>online</Text> <MobileOutlined />\r\n        </div>\r\n      </div>\r\n      <div className={s.dialog}>{messagesElements}</div>\r\n      <div className={s.form}>\r\n        <AddMessageForm onSubmit={addNewMessage} />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Dialogs\r\n","import { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { actions } from '../../redux/dialogs-reducer';\r\nimport Dialogs from './Dialogs';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport React from 'react';\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n  return {\r\n    dialogsPage: state.dialogsPage,\r\n  };\r\n};\r\n\r\nexport default compose<React.ComponentType>(\r\n  connect(mapStateToProps, { ...actions }),\r\n  withAuthRedirect,\r\n)(Dialogs);\r\n","import { AppStateType } from '../redux/redux-store'\r\nimport React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Navigate } from 'react-router-dom'\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) =>\r\n  ({\r\n    isAuth: state.auth.isAuth,\r\n  } as MapPropsType)\r\n\r\ntype MapPropsType = {\r\n  isAuth: boolean\r\n}\r\ntype DispatchPropsType = {}\r\n\r\nexport function withAuthRedirect<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n  const RedirectComponent: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n    let { isAuth, ...restProps } = props\r\n    if (!isAuth) return <Navigate to='/login' />\r\n    //@ts-ignore\r\n    return <WrappedComponent {...(restProps as WCP)} />\r\n  }\r\n\r\n  let ConnectedAuthRedirectComponent = connect<MapPropsType, DispatchPropsType, WCP, AppStateType>(\r\n    mapStateToPropsForRedirect,\r\n    {},\r\n  )(RedirectComponent)\r\n  return ConnectedAuthRedirectComponent\r\n}\r\n"],"names":["MobileOutlined","props","ref","React","AntdIcon","_objectSpread","icon","MobileOutlinedSvg","displayName","maxLength50","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","createField","Textarea","htmlType","className","s","message","messagesElements","dialogsPage","messages","map","m","id","Text","Typography","size","strong","values","newMessageBody","sendMessage","compose","connect","state","actions","withAuthRedirect","Dialogs","mapStateToPropsForRedirect","isAuth","auth","WrappedComponent","restProps","to"],"sourceRoot":""}