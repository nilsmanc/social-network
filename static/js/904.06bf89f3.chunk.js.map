{"version":3,"file":"static/js/904.06bf89f3.chunk.js","mappings":"iQAMMA,GAAcC,EAAAA,EAAAA,GAAiB,IAwBrC,GAAeC,EAAAA,EAAAA,GAAoC,CACjDC,KAAM,2BADR,EAlBI,SAACC,GACH,OACE,kBAAMC,SAAUD,EAAME,aAAtB,WACE,0BACGC,EAAAA,EAAAA,IACC,qBACA,iBACA,CAACP,GACDQ,EAAAA,OAGJ,0BACE,6C,UCvBR,GAAgB,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,0BCgBhL,EATyC,SAACJ,GACxC,IAAIK,EAAO,YAAcL,EAAMM,GAC/B,OACE,gBAAKC,UAAWC,EAAAA,OAAW,IAAMA,EAAAA,OAAjC,UACE,SAAC,KAAD,CAASC,GAAIJ,EAAb,SAAoBL,EAAMU,UCFhC,EAJqC,SAACV,GACpC,OAAO,gBAAKO,UAAWC,EAAAA,OAAhB,SAA2BR,EAAMW,WCgC1C,EAvBqC,SAACX,GACpC,IAAIY,EAAQZ,EAAMa,YAEdC,EAAkBF,EAAMG,QAAQC,KAAI,SAACC,GAAD,OACtC,SAAC,EAAD,CAAaP,KAAMO,EAAEP,KAAiBJ,GAAIW,EAAEX,IAAZW,EAAEX,OAEhCY,EAAmBN,EAAMO,SAASH,KAAI,SAACI,GAAD,OAAO,SAAC,EAAD,CAAST,QAASS,EAAET,SAAcS,EAAEd,OAMrF,OACE,iBAAKC,UAAWC,EAAAA,QAAhB,WACE,gBAAKD,UAAWC,EAAAA,aAAhB,SAAiCM,KACjC,gBAAKP,UAAWC,EAAAA,SAAhB,UACE,yBAAMU,OAER,SAAC,EAAD,CAAgBjB,SAVA,SAACoB,GACnBrB,EAAMsB,YAAYD,EAAOE,uBCX7B,GAAeC,EAAAA,EAAAA,KACbC,EAAAA,EAAAA,KAPoB,SAACb,GACrB,MAAO,CACLC,YAAaD,EAAMC,gBAKd,UAAuBa,EAAAA,IAC9BC,EAAAA,EAFF,CAGEC,I,gICZEC,EAA6B,SAACjB,GAAD,MAC9B,CACCkB,OAAQlB,EAAMmB,KAAKD,SAQhB,SAASH,EAAsBK,GAWpC,OAJqCP,EAAAA,EAAAA,IACnCI,EACA,GAFmCJ,EANiC,SAACzB,GACrE,IAAM8B,EAAyB9B,EAAzB8B,OAAWG,GAAjB,OAA+BjC,EAA/B,GACA,OAAK8B,GACE,SAACE,GAAD,UAAuBC,KADV,SAAC,KAAD,CAAUxB,GAAG","sources":["components/Dialogs/AddMessageForm/AddMessageForm.tsx","webpack://react-first/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogsItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["import React from 'react';\r\nimport { InjectedFormProps, reduxForm } from 'redux-form';\r\nimport { maxLengthCreator } from '../../../utilities/validators/validators';\r\nimport { Textarea, createField } from '../../common/FormsControls/FormsControls';\r\nimport { NewMessageFormValuesType } from '../Dialogs';\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\ntype NewMessageFormValuesKeysType = Extract<keyof NewMessageFormValuesType, string>;\r\ntype PropsType = {};\r\nconst AddMessageForm: React.FC<\r\n  InjectedFormProps<NewMessageFormValuesType, PropsType> & PropsType\r\n> = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div>\r\n        {createField<NewMessageFormValuesKeysType>(\r\n          'Enter your message',\r\n          'newMessageBody',\r\n          [maxLength50],\r\n          Textarea,\r\n        )}\r\n      </div>\r\n      <div>\r\n        <button>Send</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default reduxForm<NewMessageFormValuesType>({\r\n  form: 'dialog-add-message-form',\r\n})(AddMessageForm);\r\n","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__W-Q7s\",\"dialogsItems\":\"Dialogs_dialogsItems__zHifk\",\"active\":\"Dialogs_active__vtGPK\",\"messages\":\"Dialogs_messages__ZkNHq\",\"message\":\"Dialogs_message__F+txD\"};","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport s from \"./../Dialogs.module.css\";\r\n\r\ntype PropsType = {\r\n  id: number;\r\n  name: string;\r\n};\r\nconst DialogsItem: React.FC<PropsType> = (props) => {\r\n  let path = \"/dialogs/\" + props.id;\r\n  return (\r\n    <div className={s.dialog + \" \" + s.active}>\r\n      <NavLink to={path}>{props.name}</NavLink>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DialogsItem;\r\n","import React from \"react\";\r\nimport s from \"./../Dialogs.module.css\";\r\n\r\ntype PropsType = {\r\n  message: string;\r\n};\r\nconst Message: React.FC<PropsType> = (props) => {\r\n  return <div className={s.dialog}>{props.message}</div>;\r\n};\r\n\r\nexport default Message;\r\n","import React from 'react';\r\nimport { InitialStateType } from '../../redux/dialogs-reducer';\r\nimport AddMessageForm from './AddMessageForm/AddMessageForm';\r\nimport DialogsItem from './DialogItem/DialogsItem';\r\nimport s from './Dialogs.module.css';\r\nimport Message from './Message/Message';\r\n\r\ntype PropsType = {\r\n  dialogsPage: InitialStateType;\r\n  sendMessage: (messageText: string) => void;\r\n};\r\n\r\nexport type NewMessageFormValuesType = {\r\n  newMessageBody: string;\r\n};\r\n\r\nconst Dialogs: React.FC<PropsType> = (props) => {\r\n  let state = props.dialogsPage;\r\n\r\n  let dialogsElements = state.dialogs.map((d) => (\r\n    <DialogsItem name={d.name} key={d.id} id={d.id} />\r\n  ));\r\n  let messagesElements = state.messages.map((m) => <Message message={m.message} key={m.id} />);\r\n\r\n  let addNewMessage = (values: NewMessageFormValuesType) => {\r\n    props.sendMessage(values.newMessageBody);\r\n  };\r\n\r\n  return (\r\n    <div className={s.dialogs}>\r\n      <div className={s.dialogsItems}>{dialogsElements}</div>\r\n      <div className={s.messages}>\r\n        <div>{messagesElements}</div>\r\n      </div>\r\n      <AddMessageForm onSubmit={addNewMessage} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dialogs;\r\n","import { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { actions } from '../../redux/dialogs-reducer';\r\nimport Dialogs from './Dialogs';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport React from 'react';\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n  return {\r\n    dialogsPage: state.dialogsPage,\r\n  };\r\n};\r\n\r\nexport default compose<React.ComponentType>(\r\n  connect(mapStateToProps, { ...actions }),\r\n  withAuthRedirect,\r\n)(Dialogs);\r\n","import { AppStateType } from '../redux/redux-store';\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Navigate } from 'react-router-dom';\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) =>\r\n  ({\r\n    isAuth: state.auth.isAuth,\r\n  } as MapPropsType);\r\n\r\ntype MapPropsType = {\r\n  isAuth: boolean;\r\n};\r\ntype DispatchPropsType = {};\r\n\r\nexport function withAuthRedirect<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n  const RedirectComponent: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n    let { isAuth, ...restProps } = props;\r\n    if (!isAuth) return <Navigate to=\"/login\" />;\r\n    return <WrappedComponent {...(restProps as WCP)} />;\r\n  };\r\n\r\n  let ConnectedAuthRedirectComponent = connect<MapPropsType, DispatchPropsType, WCP, AppStateType>(\r\n    mapStateToPropsForRedirect,\r\n    {},\r\n  )(RedirectComponent);\r\n  return ConnectedAuthRedirectComponent;\r\n}\r\n"],"names":["maxLength50","maxLengthCreator","reduxForm","form","props","onSubmit","handleSubmit","createField","Textarea","path","id","className","s","to","name","message","state","dialogsPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","values","sendMessage","newMessageBody","compose","connect","actions","withAuthRedirect","Dialogs","mapStateToPropsForRedirect","isAuth","auth","WrappedComponent","restProps"],"sourceRoot":""}