{"version":3,"file":"static/js/478.ccac068b.chunk.js","mappings":"8NACA,EAAuB,uBAAvB,EAAwD,0BAAxD,EAA2F,yBAA3F,EAA2H,uBAA3H,EAAyJ,uBAAzJ,EAA4L,4B,SCmBtLA,EAAiB,WACrB,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAASC,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKH,UAS/D,OAPAI,EAAAA,EAAAA,YAAU,WAER,OADAN,GAASO,EAAAA,EAAAA,OACF,WACLP,GAASQ,EAAAA,EAAAA,UAEV,KAGD,2BACc,UAAXN,IAAsB,0EACvB,iCACE,SAACO,EAAD,KACA,SAACC,EAAD,WAMFD,EAAyB,SAAC,IC1CjB,SAAmCE,GAChD,GAAW,MAAPA,EAAa,MAAM,IAAIC,UAAU,gCDyCC,IACtC,IAAMC,GAAWV,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKQ,YAC3DC,GAAoBC,EAAAA,EAAAA,QAAuB,MACjD,GAAwCC,EAAAA,EAAAA,WAAS,GAAjD,eAAOC,EAAP,KAAqBC,EAArB,KAkBA,OAPAZ,EAAAA,EAAAA,YAAU,WACJW,GACgC,OAA9BH,EAAkBK,SACpBL,EAAkBK,QAAQC,eAAe,CAAEC,SAAU,aAGxD,CAACR,KAEF,iBAAKS,UAAWC,EAAQC,SAjBJ,SAACC,GACrB,IAAMC,EAAUD,EAAEE,cACdC,KAAKC,IAAIH,EAAQI,aAAeJ,EAAQK,UAAYL,EAAQM,cAAgB,KAC7Ef,GAAgBC,GAAgB,GAEjCD,GAAgBC,GAAgB,IAYlC,UACGL,EAASoB,KAAI,SAACC,EAAGC,GAAJ,OACZ,SAACC,EAAD,CAAoBC,QAASH,GAAfA,EAAEI,QAElB,gBAAKC,IAAKzB,QAKVsB,EAAqDI,EAAAA,MAAW,YAAkB,IAAfH,EAAc,EAAdA,QAC/DI,EAASC,EAAAA,EAAAA,KACjB,OACE,iBAAKpB,UAAWC,EAAhB,WACE,gBAAKD,UAAWC,EAAUoB,IAAKN,EAAQO,MAAOC,MAAO,CAAEC,MAAO,WAC9D,gBAAKxB,UAAWC,EAAhB,UACE,SAACkB,EAAD,CAAMM,QAAM,EAAZ,SAAcV,EAAQW,cAExB,gBAAK1B,UAAWC,EAAhB,SAAyBc,EAAQA,gBAKjC3B,EAA+B,WACnC,OAA8BM,EAAAA,EAAAA,UAAS,IAAvC,eAAOqB,EAAP,KAAgBY,EAAhB,KAEMjD,GAAWC,EAAAA,EAAAA,MAEXC,GAASC,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKH,UAU/D,OACE,4BACE,0BACE,qBACEoB,UAAWC,EACX2B,SAAU,SAACzB,GAAD,OAAOwB,EAAWxB,EAAEE,cAAcwB,QAC5CA,MAAOd,OAEX,0BACE,SAAC,IAAD,CAAQe,SAAS,SAASC,SAAqB,UAAXnD,EAAoBoD,QAjBnC,WACpBjB,IAILrC,GAASuD,EAAAA,EAAAA,IAAYlB,IACrBY,EAAW,MAWP,wBAQR,EA1G2B,WACzB,OACE,0BACE,SAAClD,EAAD","sources":["webpack://react-first/./src/pages/Chat/ChatPage.module.css?29d9","pages/Chat/ChatPage.tsx","../node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"chat\":\"ChatPage_chat__NN2J9\",\"message\":\"ChatPage_message__uLtpb\",\"avatar\":\"ChatPage_avatar__b-NOH\",\"name\":\"ChatPage_name__SMtAh\",\"text\":\"ChatPage_text__Z66WE\",\"textInput\":\"ChatPage_textInput__t+pIs\"};","import { Button, Typography } from 'antd'\r\nimport React, { useEffect, useRef, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { ChatMessageAPIType } from '../../api/chat-api'\r\nimport {\r\n  sendMessage,\r\n  startMessagesListening,\r\n  stopMessagesListening,\r\n} from '../../redux/chat-reducer'\r\nimport { AppStateType } from '../../redux/redux-store'\r\nimport s from './ChatPage.module.css'\r\n\r\nconst ChatPage: React.FC = () => {\r\n  return (\r\n    <div>\r\n      <Chat />\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Chat: React.FC = () => {\r\n  const dispatch = useDispatch()\r\n  const status = useSelector((state: AppStateType) => state.chat.status)\r\n\r\n  useEffect(() => {\r\n    dispatch(startMessagesListening())\r\n    return () => {\r\n      dispatch(stopMessagesListening())\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <div>\r\n      {status === 'error' && <div>Some error occured. Please refresh the page</div>}\r\n      <>\r\n        <Messages />\r\n        <AddMessageForm />\r\n      </>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Messages: React.FC<{}> = ({}) => {\r\n  const messages = useSelector((state: AppStateType) => state.chat.messages)\r\n  const messagesAnchorRef = useRef<HTMLDivElement>(null)\r\n  const [isAutoScroll, setIsAutoScroll] = useState(true)\r\n\r\n  const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n    const element = e.currentTarget\r\n    if (Math.abs(element.scrollHeight - element.scrollTop - element.clientHeight) < 300) {\r\n      !isAutoScroll && setIsAutoScroll(true)\r\n    } else {\r\n      isAutoScroll && setIsAutoScroll(false)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (isAutoScroll) {\r\n      if (messagesAnchorRef.current !== null) {\r\n        messagesAnchorRef.current.scrollIntoView({ behavior: 'smooth' })\r\n      }\r\n    }\r\n  }, [messages])\r\n  return (\r\n    <div className={s.chat} onScroll={scrollHandler}>\r\n      {messages.map((m, index) => (\r\n        <Message key={m.id} message={m} />\r\n      ))}\r\n      <div ref={messagesAnchorRef}></div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Message: React.FC<{ message: ChatMessageAPIType }> = React.memo(({ message }) => {\r\n  const { Text } = Typography\r\n  return (\r\n    <div className={s.message}>\r\n      <img className={s.avatar} src={message.photo} style={{ width: '30px' }} />\r\n      <div className={s.name}>\r\n        <Text strong>{message.userName}</Text>\r\n      </div>\r\n      <div className={s.text}>{message.message}</div>\r\n    </div>\r\n  )\r\n})\r\n\r\nconst AddMessageForm: React.FC<{}> = () => {\r\n  const [message, setMessage] = useState('')\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const status = useSelector((state: AppStateType) => state.chat.status)\r\n\r\n  const sendMessageHandler = () => {\r\n    if (!message) {\r\n      return\r\n    }\r\n\r\n    dispatch(sendMessage(message))\r\n    setMessage('')\r\n  }\r\n  return (\r\n    <div>\r\n      <div>\r\n        <textarea\r\n          className={s.textInput}\r\n          onChange={(e) => setMessage(e.currentTarget.value)}\r\n          value={message}></textarea>\r\n      </div>\r\n      <div>\r\n        <Button htmlType='submit' disabled={status !== 'ready'} onClick={sendMessageHandler}>\r\n          Send\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ChatPage\r\n","export default function _objectDestructuringEmpty(obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure undefined\");\n}"],"names":["Chat","dispatch","useDispatch","status","useSelector","state","chat","useEffect","startMessagesListening","stopMessagesListening","Messages","AddMessageForm","obj","TypeError","messages","messagesAnchorRef","useRef","useState","isAutoScroll","setIsAutoScroll","current","scrollIntoView","behavior","className","s","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","index","Message","message","id","ref","React","Text","Typography","src","photo","style","width","strong","userName","setMessage","onChange","value","htmlType","disabled","onClick","sendMessage"],"sourceRoot":""}