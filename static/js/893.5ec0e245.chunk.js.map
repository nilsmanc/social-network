{"version":3,"file":"static/js/893.5ec0e245.chunk.js","mappings":"oRA0BA,GAAeA,EAAAA,EAAAA,GAA4C,CACzDC,KAAM,oBADR,EAb+F,SAC7FC,GAEA,OACE,kBAAMC,SAAUD,EAAME,aAAtB,WACE,0BAAMC,EAAAA,EAAAA,IAAuC,YAAa,cAAe,GAAIC,EAAAA,OAC7E,0BACE,iDCnBR,EAA6B,4BAA7B,EAAiE,uBCAjE,EAAuB,mB,UCmBvB,EAZkC,SAACJ,GACjC,OACE,iBAAKK,UAAWC,EAAhB,WACE,gBAAKC,IAAKC,IACTR,EAAMS,SACP,4BACE,mCADF,IACqBT,EAAMU,kBCF3BC,EAAsD,SAACX,GAC3D,IAAIY,GAAgB,OAAIZ,EAAMa,OAC3BC,UACAC,KAAI,SAACC,GAAD,OAAO,SAAC,EAAD,CAAiBP,QAASO,EAAEP,QAASC,WAAYM,EAAEN,YAAxCM,EAAEC,OAO3B,OACE,iBAAKZ,UAAWC,EAAhB,WACE,sCACA,SAAC,EAAD,CAAaL,SARD,SAACiB,GACflB,EAAMmB,QAAQD,EAAOE,aACrBF,EAAOE,YAAc,OAOnB,gBAAKf,UAAWC,EAAhB,SAA0BM,QAMhC,EAFyBS,EAAAA,KAAWV,GCXpC,GAPyBW,EAAAA,EAAAA,KAND,SAACC,GACvB,MAAO,CACLV,MAAOU,EAAMC,YAAYX,SAM3B,CACEM,QAASM,EAAAA,GAAAA,sBAHYH,CAKvBX,G,mBChBF,EAAmC,sCAAnC,EAAqF,+BAArF,EAA8H,6BAA9H,EAAkK,0BC+ClK,EA1CoD,SAACX,GACnD,OAA8B0B,EAAAA,EAAAA,WAAS,GAAvC,eAAKC,EAAL,KAAeC,EAAf,KACA,GAA0BF,EAAAA,EAAAA,UAAS1B,EAAM6B,QAAzC,eAAKA,EAAL,KAAaC,EAAb,MAEAC,EAAAA,EAAAA,YAAU,WACRD,EAAU9B,EAAM6B,UACf,CAAC7B,EAAM6B,SAeV,OACE,4BACIF,IACA,4BACE,qCACA,iBAAMK,cAlBW,WACvBJ,GAAY,IAiBN,SAAwC5B,EAAM6B,QAAU,aAG3DF,IACC,0BACE,kBACEM,SAfa,SAACC,GACtBJ,EAAUI,EAAEC,cAAcC,QAelBC,WAAW,EACXC,OAtBiB,WACzBV,GAAY,GACZ5B,EAAMuC,aAAaV,IAqBXO,MAAOP,U,UC6BnB,GAHiC/B,EAAAA,EAAAA,GAAkC,CACjEC,KAAM,gBADyBD,EAlDwD,SAAC,GAInF,IAHLI,EAGI,EAHJA,aACAsC,EAEI,EAFJA,QACAC,EACI,EADJA,MAEA,OACE,kBAAMxC,SAAUC,EAAhB,WACE,0BACE,uCAEDuC,IAAS,gBAAKpC,UAAWqC,EAAAA,EAAAA,iBAAhB,SAAyCD,KACnD,4BACE,sCADF,MACsBtC,EAAAA,EAAAA,IAA6B,YAAa,WAAY,GAAIC,EAAAA,QAEhF,4BACE,8CADF,KAEGD,EAAAA,EAAAA,IAA6B,GAAI,iBAAkB,GAAIC,EAAAA,GAAO,CAC7DuC,KAAM,iBAIV,4BACE,mDADF,KAEGxC,EAAAA,EAAAA,IACC,yBACA,4BACA,GACAyC,EAAAA,QAIJ,4BACE,oCADF,KACmBzC,EAAAA,EAAAA,IAA6B,WAAY,UAAW,GAAIyC,EAAAA,QAE3E,4BACE,oCADF,IACmB,IAChBC,OAAOC,KAAKN,EAAQO,UAAUhC,KAAI,SAACiC,GAClC,OACE,gBAAe3C,UAAWC,EAA1B,UACE,yBACG0C,EADH,MACU7C,EAAAA,EAAAA,IAAY6C,EAAK,YAAcA,EAAK,GAAI5C,EAAAA,QAF1C4C,eCgBhBC,EAA8C,SAAC,GAAwC,IAAtCT,EAAqC,EAArCA,QAASU,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,aACvE,OACE,2BACGD,IACC,0BACE,mBAAQE,QAASD,EAAjB,qBAGJ,4BACE,sCADF,KACsBX,EAAQa,aAE9B,4BACE,8CADF,KAC8Bb,EAAQc,eAAiB,MAAQ,QAE9Dd,EAAQc,iBACP,4BACE,mDADF,KACmCd,EAAQe,8BAG7C,4BACE,oCADF,KACoBf,EAAQgB,YAE5B,4BACE,oCADF,IACmB,IAChBX,OAAOC,KAAKN,EAAQO,UAAUhC,KAAI,SAACiC,GAClC,OACE,SAACS,EAAD,CAEEC,aAAcV,EACdW,aAAcnB,EAAQO,SAASC,IAF1BA,aAcbS,EAAuC,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,aAAcC,EAAmB,EAAnBA,aAC5D,OACE,iBAAKtD,UAAWC,EAAhB,WACE,uBAAIoD,IADN,KAC0BC,MAI9B,EAtGyC,SAAC,GAOnC,IANLnB,EAMI,EANJA,QACAX,EAKI,EALJA,OACAU,EAII,EAJJA,aACAW,EAGI,EAHJA,QACAU,EAEI,EAFJA,UACAC,EACI,EADJA,YAEA,GAA8BnC,EAAAA,EAAAA,WAAS,GAAvC,eAAKC,EAAL,KAAeC,EAAf,KAEA,IAAKY,EACH,OAAO,SAACsB,EAAA,EAAD,IAeT,OACE,0BACE,iBAAKzD,UAAWC,EAAhB,WACE,gBAAKC,IAAKiC,EAAQuB,OAAOC,OAASC,EAAW5D,UAAWC,IACvD4C,IAAW,kBAAO7C,UAAWC,EAAQqC,KAAM,OAAQV,SAhB9B,SAACC,GACvBA,EAAEgC,OAAOC,OAASjC,EAAEgC,OAAOC,MAAMC,QACnCR,EAAU1B,EAAEgC,OAAOC,MAAM,OAetBxC,GACC,SAAC,EAAD,CAAiB0C,cAAe7B,EAASA,QAASA,EAASvC,SAZlD,SAACqE,GAChBT,EAAYS,GAAUC,MAAK,WACzB3C,GAAY,UAYR,SAACqB,EAAD,CACEE,aAAc,WACZvB,GAAY,IAEdY,QAASA,EACTU,QAASA,KAGb,SAAC,EAAD,CAAwBrB,OAAQA,EAAQU,aAAcA,UC9B9D,EAhBqC,SAACvC,GACpC,OACE,4BACE,SAAC,EAAD,CACE4D,UAAW5D,EAAM4D,UACjBV,QAASlD,EAAMkD,QACfV,QAASxC,EAAMwC,QACfX,OAAQ7B,EAAM6B,OACdgC,YAAa7D,EAAM6D,YACnBtB,aAAcvC,EAAMuC,gBAEtB,SAAC,EAAD,Q,8BCQAiC,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GACJ,WAAYxE,GAAmB,kCACvBA,GAuCP,OAtCA,sCACD,WACE,IAAIyE,GAAyBC,KAAK1E,MAAM2E,OAAOC,OAAOH,OACjDA,IACHA,EAASC,KAAK1E,MAAM6E,mBAElBH,KAAK1E,MAAM8E,QAAQC,KAAK,UAGvBN,GAGHC,KAAK1E,MAAMgF,eAAeP,GAC1BC,KAAK1E,MAAMiF,UAAUR,IAHrBS,QAAQzC,MAAM,mEAKjB,+BAED,WACEiC,KAAKS,mBACN,gCAED,SAAmBC,EAAsBC,GACnCX,KAAK1E,MAAM2E,OAAOC,OAAOH,QAAUW,EAAUT,OAAOC,OAAOH,QAAQC,KAAKS,mBAC7E,kCAED,cAA+B,oBAE/B,WACE,OACE,SAAC,GAAD,kBACMT,KAAK1E,OADX,IAEEkD,SAAUwB,KAAK1E,MAAM2E,OAAOC,OAAOH,OACnCjC,QAASkC,KAAK1E,MAAMwC,QACpBX,OAAQ6C,KAAK1E,MAAM6B,OACnBU,aAAcmC,KAAK1E,MAAMuC,aACzBqB,UAAWc,KAAK1E,MAAM4D,iBAG3B,EAzCGY,CAAyBnD,EAAAA,WAoD/B,GAAeiE,EAAAA,EAAAA,KACbhE,EAAAA,EAAAA,KAToB,SAACC,GACrB,MAAO,CACLiB,QAASjB,EAAMC,YAAYgB,QAC3BX,OAAQN,EAAMC,YAAYK,OAC1BgD,iBAAkBtD,EAAMgE,KAAKd,OAC7Be,OAAQjE,EAAMgE,KAAKC,UAII,CACvBR,eAAAA,EAAAA,GACAC,UAAAA,EAAAA,GACA1C,aAAAA,EAAAA,GACAqB,UAAAA,EAAAA,GACAC,YAAAA,EAAAA,KAEF4B,EAAAA,EACAC,EAAAA,EATF,CAUElB,I,gICzFEmB,EAA6B,SAACpE,GAAD,MAC9B,CACCiE,OAAQjE,EAAMgE,KAAKC,SAQhB,SAASE,EAAsBE,GAWpC,OAJqCtE,EAAAA,EAAAA,IACnCqE,EACA,GAFmCrE,EANiC,SAACtB,GACrE,IAAMwF,EAAyBxF,EAAzBwF,OAAWK,GAAjB,OAA+B7F,EAA/B,GACA,OAAKwF,GACE,SAACI,GAAD,UAAuBC,KADV,SAAC,KAAD,CAAUC,GAAG","sources":["components/Profile/MyPosts/AddPostForm/AddPostForm.tsx","webpack://react-first/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://react-first/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","webpack://react-first/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["import React from 'react';\r\nimport { InjectedFormProps, reduxForm } from 'redux-form';\r\nimport { Input } from '../../../common/FormsControls/FormsControls';\r\nimport { createField, GetStringKeys } from '../../../common/FormsControls/FormsControls';\r\n\r\ntype PropsType = {};\r\n\r\nexport type AddPostFormValuesType = {\r\n  newPostText: string;\r\n};\r\n\r\ntype AddPostFormValuesTypeKeys = GetStringKeys<AddPostFormValuesType>;\r\n\r\nconst AddPostForm: React.FC<InjectedFormProps<AddPostFormValuesType, PropsType> & PropsType> = (\r\n  props,\r\n) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div>{createField<AddPostFormValuesTypeKeys>('Your post', 'newPostText', [], Input)}</div>\r\n      <div>\r\n        <button>Add post</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default reduxForm<AddPostFormValuesType, PropsType>({\r\n  form: 'profile-add-post',\r\n})(AddPostForm);\r\n","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__r6tDq\",\"posts\":\"MyPosts_posts__4pUsA\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__AueTq\"};","import React from 'react';\r\nimport s from './Post.module.css';\r\nimport UserPhoto from '../../../../assets/images/user.png';\r\n\r\ntype PropsType = {\r\n  message: string;\r\n  likesCount: number;\r\n};\r\nconst Post: React.FC<PropsType> = (props) => {\r\n  return (\r\n    <div className={s.item}>\r\n      <img src={UserPhoto} />\r\n      {props.message}\r\n      <div>\r\n        <span>like</span> {props.likesCount}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n","import React from 'react';\r\nimport { PostType } from '../../../types/types';\r\nimport AddPostForm, { AddPostFormValuesType } from './AddPostForm/AddPostForm';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\n\r\nexport type MapPropsType = {\r\n  posts: Array<PostType>;\r\n};\r\nexport type DispatchPropsType = {\r\n  addPost: (newPostText: string) => void;\r\n};\r\nconst MyPosts: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n  let postsElements = [...props.posts]\r\n    .reverse()\r\n    .map((p) => <Post key={p.id} message={p.message} likesCount={p.likesCount} />);\r\n\r\n  let onAddPost = (values: AddPostFormValuesType) => {\r\n    props.addPost(values.newPostText);\r\n    values.newPostText = '';\r\n  };\r\n\r\n  return (\r\n    <div className={s.postsBlock}>\r\n      <h3>My Posts</h3>\r\n      <AddPostForm onSubmit={onAddPost} />\r\n      <div className={s.posts}>{postsElements}</div>\r\n    </div>\r\n  );\r\n};\r\nconst MyPostsMemorized = React.memo(MyPosts);\r\n\r\nexport default MyPostsMemorized;\r\n","import { connect } from 'react-redux';\r\nimport { actions } from '../../../redux/profile-reducer';\r\nimport { AppStateType } from '../../../redux/redux-store';\r\nimport { DispatchPropsType, MapPropsType } from './MyPosts';\r\nimport MyPosts from './MyPosts';\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n  return {\r\n    posts: state.profilePage.posts,\r\n  };\r\n};\r\n\r\nconst MyPostsContainer = connect<MapPropsType, DispatchPropsType, {}, AppStateType>(\r\n  mapStateToProps,\r\n  {\r\n    addPost: actions.addPostActionCreator,\r\n  },\r\n)(MyPosts);\r\n\r\nexport default MyPostsContainer;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__fI29I\",\"mainPhoto\":\"ProfileInfo_mainPhoto__BxLV7\",\"contact\":\"ProfileInfo_contact__Qvirx\",\"file\":\"ProfileInfo_file__-hqGg\"};","import React, { ChangeEvent, useEffect, useState } from 'react';\r\n\r\ntype PropsType = {\r\n  status: string;\r\n  updateStatus: (status: string) => void;\r\n};\r\nconst ProfileStatusWithHooks: React.FC<PropsType> = (props) => {\r\n  let [editMode, setEditMode] = useState(false);\r\n  let [status, setStatus] = useState(props.status);\r\n\r\n  useEffect(() => {\r\n    setStatus(props.status);\r\n  }, [props.status]);\r\n\r\n  const activateEditMode = () => {\r\n    setEditMode(true);\r\n  };\r\n\r\n  const deactivateEditMode = () => {\r\n    setEditMode(false);\r\n    props.updateStatus(status);\r\n  };\r\n\r\n  const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setStatus(e.currentTarget.value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {!editMode && (\r\n        <div>\r\n          <b>Status: </b>\r\n          <span onDoubleClick={activateEditMode}>{props.status || '-----'}</span>\r\n        </div>\r\n      )}\r\n      {editMode && (\r\n        <div>\r\n          <input\r\n            onChange={onStatusChange}\r\n            autoFocus={true}\r\n            onBlur={deactivateEditMode}\r\n            value={status}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default ProfileStatusWithHooks;\r\n","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport { InjectedFormProps, reduxForm } from 'redux-form';\r\nimport {\r\n  createField,\r\n  Input,\r\n  Textarea,\r\n  GetStringKeys,\r\n} from '../../common/FormsControls/FormsControls';\r\nimport style from '../../common/FormsControls/FormsControls.module.css';\r\nimport { ProfileType } from '../../../types/types';\r\n\r\ntype PropsType = {\r\n  profile: ProfileType;\r\n};\r\ntype ProfileTypeKeys = GetStringKeys<ProfileType>;\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = ({\r\n  handleSubmit,\r\n  profile,\r\n  error,\r\n}) => {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div>\r\n        <button>save</button>\r\n      </div>\r\n      {error && <div className={style.formSummaryError}>{error}</div>}\r\n      <div>\r\n        <b>Full name </b>: {createField<ProfileTypeKeys>('Full name', 'fullName', [], Input)}\r\n      </div>\r\n      <div>\r\n        <b>Looking for a job </b>:\r\n        {createField<ProfileTypeKeys>('', 'lookingForAJob', [], Input, {\r\n          type: 'checkbox',\r\n        })}\r\n      </div>\r\n\r\n      <div>\r\n        <b>My professional skills </b>:\r\n        {createField<ProfileTypeKeys>(\r\n          'My professional skills',\r\n          'lookingForAJobDescription',\r\n          [],\r\n          Textarea,\r\n        )}\r\n      </div>\r\n\r\n      <div>\r\n        <b>About me</b>:{createField<ProfileTypeKeys>('About me', 'aboutMe', [], Textarea)}\r\n      </div>\r\n      <div>\r\n        <b>Contacts</b>:{' '}\r\n        {Object.keys(profile.contacts).map((key) => {\r\n          return (\r\n            <div key={key} className={s.contact}>\r\n              <b>\r\n                {key}: {createField(key, 'contacts.' + key, [], Input)}\r\n              </b>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst ProfileDataFormReduxFrom = reduxForm<ProfileType, PropsType>({\r\n  form: 'edit-profile',\r\n})(ProfileDataForm);\r\nexport default ProfileDataFormReduxFrom;\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport Preloader from '../../common/Preloader/Preloader';\r\nimport s from './ProfileInfo.module.css';\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\r\nimport userPhoto from '../../../assets/images/user.png';\r\nimport ProfileDataForm from './ProfileDataForm';\r\nimport { ContactsType, ProfileType } from '../../../types/types';\r\n\r\ntype PropsType = {\r\n  profile: ProfileType | null;\r\n  status: string;\r\n  updateStatus: (status: string) => void;\r\n  isOwner: boolean;\r\n  savePhoto: (file: File) => void;\r\n  saveProfile: (profile: ProfileType) => Promise<any>;\r\n};\r\n\r\nconst ProfileInfo: React.FC<PropsType> = ({\r\n  profile,\r\n  status,\r\n  updateStatus,\r\n  isOwner,\r\n  savePhoto,\r\n  saveProfile,\r\n}) => {\r\n  let [editMode, setEditMode] = useState(false);\r\n\r\n  if (!profile) {\r\n    return <Preloader />;\r\n  }\r\n\r\n  const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n    if (e.target.files && e.target.files.length) {\r\n      savePhoto(e.target.files[0]);\r\n    }\r\n  };\r\n\r\n  const onSubmit = (formData: ProfileType) => {\r\n    saveProfile(formData).then(() => {\r\n      setEditMode(false);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className={s.descriptionBlock}>\r\n        <img src={profile.photos.large || userPhoto} className={s.mainPhoto} />\r\n        {isOwner && <input className={s.file} type={'file'} onChange={onMainPhotoSelected} />}\r\n        {editMode ? (\r\n          <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit} />\r\n        ) : (\r\n          <ProfileData\r\n            goToEditMode={() => {\r\n              setEditMode(true);\r\n            }}\r\n            profile={profile}\r\n            isOwner={isOwner}\r\n          />\r\n        )}\r\n        <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\ntype ProfileDataPropsType = {\r\n  profile: ProfileType;\r\n  isOwner: boolean;\r\n  goToEditMode: () => void;\r\n};\r\n\r\nconst ProfileData: React.FC<ProfileDataPropsType> = ({ profile, isOwner, goToEditMode }) => {\r\n  return (\r\n    <div>\r\n      {isOwner && (\r\n        <div>\r\n          <button onClick={goToEditMode}>edit</button>\r\n        </div>\r\n      )}\r\n      <div>\r\n        <b>Full name </b>: {profile.fullName}\r\n      </div>\r\n      <div>\r\n        <b>Looking for a job </b>: {profile.lookingForAJob ? 'yes' : 'no'}\r\n      </div>\r\n      {profile.lookingForAJob && (\r\n        <div>\r\n          <b>My professional skills </b>: {profile.lookingForAJobDescription}\r\n        </div>\r\n      )}\r\n      <div>\r\n        <b>About me</b>: {profile.aboutMe}\r\n      </div>\r\n      <div>\r\n        <b>Contacts</b>:{' '}\r\n        {Object.keys(profile.contacts).map((key) => {\r\n          return (\r\n            <Contact\r\n              key={key}\r\n              contactTitle={key}\r\n              contactValue={profile.contacts[key as keyof ContactsType]}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\ntype ContactsPropsType = {\r\n  contactTitle: string;\r\n  contactValue: string;\r\n};\r\nconst Contact: React.FC<ContactsPropsType> = ({ contactTitle, contactValue }) => {\r\n  return (\r\n    <div className={s.contact}>\r\n      <b>{contactTitle}</b>: {contactValue}\r\n    </div>\r\n  );\r\n};\r\nexport default ProfileInfo;\r\n","import React from 'react';\r\nimport { ProfileType } from '../../types/types';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\n\r\ntype PropsType = {\r\n  profile: ProfileType | null;\r\n  status: string;\r\n  updateStatus: (status: string) => void;\r\n  isOwner: boolean;\r\n  savePhoto: (file: File) => void;\r\n  saveProfile: (profile: ProfileType) => Promise<any>;\r\n};\r\nconst Profile: React.FC<PropsType> = (props) => {\r\n  return (\r\n    <div>\r\n      <ProfileInfo\r\n        savePhoto={props.savePhoto}\r\n        isOwner={props.isOwner}\r\n        profile={props.profile}\r\n        status={props.status}\r\n        saveProfile={props.saveProfile}\r\n        updateStatus={props.updateStatus}\r\n      />\r\n      <MyPostsContainer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Profile from './Profile';\r\nimport {\r\n  getStatus,\r\n  getUserProfile,\r\n  updateStatus,\r\n  savePhoto,\r\n  saveProfile,\r\n} from '../../redux/profile-reducer';\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\nimport { withRouter } from '../../hoc/withRouter';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport { ProfileType } from '../../types/types';\r\nimport { History } from 'history';\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>;\r\ntype DispatchPropsType = {\r\n  getUserProfile: (userId: number) => void;\r\n  getStatus: (userId: number) => void;\r\n  updateStatus: (status: string) => void;\r\n  savePhoto: (file: File) => void;\r\n  saveProfile: (profile: ProfileType) => Promise<any>;\r\n};\r\n\r\ntype PathParamsType = {\r\n  router: any;\r\n  history: History;\r\n};\r\n\r\ntype PropsType = MapPropsType & DispatchPropsType & PathParamsType;\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n  constructor(props: PropsType) {\r\n    super(props);\r\n  }\r\n  refreshProfile() {\r\n    let userId: number | null = +this.props.router.params.userId;\r\n    if (!userId) {\r\n      userId = this.props.authorizedUserId;\r\n      if (!userId) {\r\n        this.props.history.push('/login');\r\n      }\r\n    }\r\n    if (!userId) {\r\n      console.error(\"ID should exist in URI params or in state('authorizedUserId')\");\r\n    } else {\r\n      this.props.getUserProfile(userId);\r\n      this.props.getStatus(userId);\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.refreshProfile();\r\n  }\r\n\r\n  componentDidUpdate(prevProps: PropsType, prevState: PropsType) {\r\n    if (this.props.router.params.userId != prevProps.router.params.userId) this.refreshProfile();\r\n  }\r\n\r\n  componentWillUnmount(): void {}\r\n\r\n  render() {\r\n    return (\r\n      <Profile\r\n        {...this.props}\r\n        isOwner={!this.props.router.params.userId}\r\n        profile={this.props.profile}\r\n        status={this.props.status}\r\n        updateStatus={this.props.updateStatus}\r\n        savePhoto={this.props.savePhoto}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n  return {\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth,\r\n  };\r\n};\r\nexport default compose<React.ComponentType>(\r\n  connect(mapStateToProps, {\r\n    getUserProfile,\r\n    getStatus,\r\n    updateStatus,\r\n    savePhoto,\r\n    saveProfile,\r\n  }),\r\n  withRouter,\r\n  withAuthRedirect,\r\n)(ProfileContainer);\r\n","import { AppStateType } from '../redux/redux-store';\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Navigate } from 'react-router-dom';\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) =>\r\n  ({\r\n    isAuth: state.auth.isAuth,\r\n  } as MapPropsType);\r\n\r\ntype MapPropsType = {\r\n  isAuth: boolean;\r\n};\r\ntype DispatchPropsType = {};\r\n\r\nexport function withAuthRedirect<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n  const RedirectComponent: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n    let { isAuth, ...restProps } = props;\r\n    if (!isAuth) return <Navigate to=\"/login\" />;\r\n    return <WrappedComponent {...(restProps as WCP)} />;\r\n  };\r\n\r\n  let ConnectedAuthRedirectComponent = connect<MapPropsType, DispatchPropsType, WCP, AppStateType>(\r\n    mapStateToPropsForRedirect,\r\n    {},\r\n  )(RedirectComponent);\r\n  return ConnectedAuthRedirectComponent;\r\n}\r\n"],"names":["reduxForm","form","props","onSubmit","handleSubmit","createField","Input","className","s","src","UserPhoto","message","likesCount","MyPosts","postsElements","posts","reverse","map","p","id","values","addPost","newPostText","React","connect","state","profilePage","actions","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","profile","error","style","type","Textarea","Object","keys","contacts","key","ProfileData","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Contact","contactTitle","contactValue","savePhoto","saveProfile","Preloader","photos","large","userPhoto","target","files","length","initialValues","formData","then","ProfileContainer","userId","this","router","params","authorizedUserId","history","push","getUserProfile","getStatus","console","refreshProfile","prevProps","prevState","compose","auth","isAuth","withRouter","withAuthRedirect","mapStateToPropsForRedirect","WrappedComponent","restProps","to"],"sourceRoot":""}