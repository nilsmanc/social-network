{"version":3,"file":"static/js/927.21699a64.chunk.js","mappings":"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","sources":["components/Profile/MyPosts/AddPostForm/AddPostForm.tsx","webpack://react-first/./src/components/Profile/MyPosts/MyPosts.module.css?831b","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","webpack://react-first/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["import { Button } from 'antd'\r\nimport React from 'react'\r\nimport { InjectedFormProps, reduxForm } from 'redux-form'\r\nimport { Textarea } from '../../../common/FormsControls/FormsControls'\r\nimport { createField, GetStringKeys } from '../../../common/FormsControls/FormsControls'\r\n\r\ntype PropsType = {}\r\n\r\nexport type AddPostFormValuesType = {\r\n  newPostText: string\r\n}\r\n\r\ntype AddPostFormValuesTypeKeys = GetStringKeys<AddPostFormValuesType>\r\n\r\nconst AddPostForm: React.FC<InjectedFormProps<AddPostFormValuesType, PropsType> & PropsType> = (\r\n  props,\r\n) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div>{createField<AddPostFormValuesTypeKeys>('Your post', 'newPostText', [], Textarea)}</div>\r\n      <div>\r\n        <Button htmlType='submit' style={{ margin: '5px 0 0 0' }}>\r\n          Add post\r\n        </Button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default reduxForm<AddPostFormValuesType, PropsType>({\r\n  form: 'profile-add-post',\r\n})(AddPostForm)\r\n","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__r6tDq\",\"posts\":\"MyPosts_posts__4pUsA\"};","import React, { createElement, useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { getProfilePhoto, getUserName } from '../../../../redux/auth-selectors'\r\nimport { Comment, Tooltip } from 'antd'\r\nimport { DislikeFilled, DislikeOutlined, LikeFilled, LikeOutlined } from '@ant-design/icons'\r\nimport moment from 'moment'\r\n\r\ntype PropsType = {\r\n  message: string\r\n}\r\n\r\nconst Post: React.FC<PropsType> = (props) => {\r\n  const [likes, setLikes] = useState(0)\r\n  const [dislikes, setDislikes] = useState(0)\r\n  const [action, setAction] = useState<string | null>(null)\r\n\r\n  const like = () => {\r\n    setLikes(1)\r\n    setDislikes(0)\r\n    setAction('liked')\r\n  }\r\n\r\n  const dislike = () => {\r\n    setLikes(0)\r\n    setDislikes(1)\r\n    setAction('disliked')\r\n  }\r\n\r\n  const actions = [\r\n    <Tooltip key='comment-basic-like' title='Like'>\r\n      <span onClick={like}>\r\n        {createElement(action === 'liked' ? LikeFilled : LikeOutlined)}\r\n        <span className='comment-action'>{likes}</span>\r\n      </span>\r\n    </Tooltip>,\r\n    <Tooltip key='comment-basic-dislike' title='Dislike'>\r\n      <span onClick={dislike}>\r\n        {React.createElement(action === 'disliked' ? DislikeFilled : DislikeOutlined)}\r\n        <span className='comment-action'>{dislikes}</span>\r\n      </span>\r\n    </Tooltip>,\r\n    <span key='comment-basic-reply-to'>Reply to</span>,\r\n  ]\r\n\r\n  const small = useSelector(getProfilePhoto) as string\r\n\r\n  const name = useSelector(getUserName)\r\n\r\n  return (\r\n    <Comment\r\n      actions={actions}\r\n      author={name}\r\n      avatar={small}\r\n      content={props.message}\r\n      datetime={\r\n        <Tooltip title={moment().format('YYYY-MM-DD HH:mm:ss')}>\r\n          <span>{moment().fromNow()}</span>\r\n        </Tooltip>\r\n      }\r\n    />\r\n  )\r\n}\r\n\r\nexport default Post\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { getProfile } from '../../../redux/auth-selectors'\r\nimport { PostType } from '../../../types/types'\r\nimport AddPostForm, { AddPostFormValuesType } from './AddPostForm/AddPostForm'\r\nimport s from './MyPosts.module.css'\r\nimport Post from './Post/Post'\r\n\r\nexport type MapPropsType = {\r\n  posts: Array<PostType>\r\n}\r\nexport type DispatchPropsType = {\r\n  addPost: (newPostText: string) => void\r\n}\r\n\r\nconst MyPosts: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n  let postsElements = [...props.posts].reverse().map((p) => <Post key={p.id} message={p.message} />)\r\n\r\n  let onAddPost = (values: AddPostFormValuesType) => {\r\n    if (values.newPostText) {\r\n      props.addPost(values.newPostText)\r\n      values.newPostText = ''\r\n    }\r\n  }\r\n\r\n  const profile = useSelector(getProfile)\r\n  if (!profile) {\r\n    return <></>\r\n  }\r\n\r\n  return (\r\n    <div className={s.postsBlock}>\r\n      <h3>My Posts</h3>\r\n      <AddPostForm onSubmit={onAddPost} />\r\n      <div className={s.posts}>{postsElements}</div>\r\n    </div>\r\n  )\r\n}\r\nconst MyPostsMemorized = React.memo(MyPosts)\r\n\r\nexport default MyPostsMemorized\r\n","import { connect } from 'react-redux';\r\nimport { actions } from '../../../redux/profile-reducer';\r\nimport { AppStateType } from '../../../redux/redux-store';\r\nimport { DispatchPropsType, MapPropsType } from './MyPosts';\r\nimport MyPosts from './MyPosts';\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n  return {\r\n    posts: state.profilePage.posts,\r\n  };\r\n};\r\n\r\nconst MyPostsContainer = connect<MapPropsType, DispatchPropsType, {}, AppStateType>(\r\n  mapStateToProps,\r\n  {\r\n    addPost: actions.addPostActionCreator,\r\n  },\r\n)(MyPosts);\r\n\r\nexport default MyPostsContainer;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"mainPhoto\":\"ProfileInfo_mainPhoto__BxLV7\",\"contact\":\"ProfileInfo_contact__Qvirx\",\"file\":\"ProfileInfo_file__-hqGg\",\"edit\":\"ProfileInfo_edit__GPLH-\",\"label\":\"ProfileInfo_label__qknNK\",\"profileWrapper\":\"ProfileInfo_profileWrapper__UwMXf\",\"nameBlock\":\"ProfileInfo_nameBlock__idtMS\",\"avatarBlock\":\"ProfileInfo_avatarBlock__hitYH\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__fI29I\"};","import React, { ChangeEvent, useEffect, useState } from 'react'\r\n\r\ntype PropsType = {\r\n  status: string\r\n  updateStatus: (status: string) => void\r\n}\r\nconst ProfileStatusWithHooks: React.FC<PropsType> = (props) => {\r\n  let [editMode, setEditMode] = useState(false)\r\n  let [status, setStatus] = useState(props.status)\r\n\r\n  useEffect(() => {\r\n    setStatus(props.status)\r\n  }, [props.status])\r\n\r\n  const activateEditMode = () => {\r\n    setEditMode(true)\r\n  }\r\n\r\n  const deactivateEditMode = () => {\r\n    setEditMode(false)\r\n    props.updateStatus(status)\r\n  }\r\n\r\n  const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setStatus(e.currentTarget.value)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {!editMode && (\r\n        <div>\r\n          <span onClick={activateEditMode}>{props.status || \"What's new?\"}</span>\r\n        </div>\r\n      )}\r\n      {editMode && (\r\n        <div>\r\n          <input\r\n            onChange={onStatusChange}\r\n            autoFocus={true}\r\n            onBlur={deactivateEditMode}\r\n            value={status}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\nexport default ProfileStatusWithHooks\r\n","import React from 'react'\r\nimport s from './ProfileInfo.module.css'\r\nimport { InjectedFormProps, reduxForm } from 'redux-form'\r\nimport {\r\n  createField,\r\n  Input,\r\n  Textarea,\r\n  GetStringKeys,\r\n} from '../../common/FormsControls/FormsControls'\r\nimport style from '../../common/FormsControls/FormsControls.module.css'\r\nimport { ProfileType } from '../../../types/types'\r\nimport { Typography } from 'antd'\r\n\r\ntype PropsType = {\r\n  profile: ProfileType\r\n}\r\ntype ProfileTypeKeys = GetStringKeys<ProfileType>\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = ({\r\n  handleSubmit,\r\n  profile,\r\n  error,\r\n}) => {\r\n  const { Text } = Typography\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div>\r\n        <button>save</button>\r\n      </div>\r\n      {error && <div className={style.formSummaryError}>{error}</div>}\r\n      <div>\r\n        <Text strong>Full name </Text>:{' '}\r\n        {createField<ProfileTypeKeys>('Full name', 'fullName', [], Input)}\r\n      </div>\r\n      <div>\r\n        <Text strong>Looking for a job </Text>:\r\n        {createField<ProfileTypeKeys>('', 'lookingForAJob', [], Input, {\r\n          type: 'checkbox',\r\n        })}\r\n      </div>\r\n\r\n      <div>\r\n        <Text strong>My professional skills </Text>:\r\n        {createField<ProfileTypeKeys>(\r\n          'My professional skills',\r\n          'lookingForAJobDescription',\r\n          [],\r\n          Textarea,\r\n        )}\r\n      </div>\r\n\r\n      <div>\r\n        <Text strong>About me</Text>:\r\n        {createField<ProfileTypeKeys>('About me', 'aboutMe', [], Textarea)}\r\n      </div>\r\n      <div>\r\n        <Text strong>Contacts</Text>:{' '}\r\n        {Object.keys(profile.contacts).map((key) => {\r\n          return (\r\n            <div key={key} className={s.contact}>\r\n              <Text strong>\r\n                {key}: {createField(key, 'contacts.' + key, [], Input)}\r\n              </Text>\r\n            </div>\r\n          )\r\n        })}\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nconst ProfileDataFormReduxFrom = reduxForm<ProfileType, PropsType>({\r\n  form: 'edit-profile',\r\n})(ProfileDataForm)\r\nexport default ProfileDataFormReduxFrom\r\n","import React, { ChangeEvent, useState } from 'react'\r\nimport s from './ProfileInfo.module.css'\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks'\r\nimport userPhoto from '../../../assets/images/user.png'\r\nimport ProfileDataForm from './ProfileDataForm'\r\nimport { ContactsType, ProfileType } from '../../../types/types'\r\nimport { Button, Spin, Tabs, Typography } from 'antd'\r\nimport { EditOutlined } from '@ant-design/icons'\r\n\r\ntype PropsType = {\r\n  profile: ProfileType | null\r\n  status: string\r\n  updateStatus: (status: string) => void\r\n  isOwner: boolean\r\n  savePhoto: (file: File) => void\r\n  saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nconst ProfileInfo: React.FC<PropsType> = ({\r\n  profile,\r\n  status,\r\n  updateStatus,\r\n  isOwner,\r\n  savePhoto,\r\n  saveProfile,\r\n}) => {\r\n  let [editMode, setEditMode] = useState(false)\r\n  const { Title } = Typography\r\n\r\n  if (!profile) {\r\n    return <Spin size='large' />\r\n  }\r\n\r\n  const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n    if (e.target.files && e.target.files.length) {\r\n      savePhoto(e.target.files[0])\r\n      console.log(e)\r\n    }\r\n  }\r\n\r\n  const onSubmit = (formData: ProfileType) => {\r\n    saveProfile(formData).then(() => {\r\n      setEditMode(false)\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div className={s.profileWrapper}>\r\n      <div className={s.nameBlock}>\r\n        <Title>\r\n          <span>{profile.fullName}</span>\r\n        </Title>\r\n        <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\r\n      </div>\r\n      <input className={s.file} type={'file'} id='file' onChange={onMainPhotoSelected} />\r\n      <div className={s.avatarBlock}>\r\n        <img src={profile.photos.large || userPhoto} className={s.mainPhoto} />\r\n        {isOwner && (\r\n          <Button>\r\n            <label htmlFor='file' className={s.label}>\r\n              <span>Upload Photo</span>\r\n            </label>\r\n          </Button>\r\n        )}\r\n      </div>\r\n\r\n      <div className={s.descriptionBlock}>\r\n        {editMode ? (\r\n          <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit} />\r\n        ) : (\r\n          <ProfileData\r\n            goToEditMode={() => {\r\n              setEditMode(true)\r\n            }}\r\n            profile={profile}\r\n            isOwner={isOwner}\r\n          />\r\n        )}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\ntype ProfileDataPropsType = {\r\n  profile: ProfileType\r\n  isOwner: boolean\r\n  goToEditMode: () => void\r\n}\r\n\r\nconst ProfileData: React.FC<ProfileDataPropsType> = ({ profile, isOwner, goToEditMode }) => {\r\n  const { TabPane } = Tabs\r\n\r\n  const operations = <EditOutlined onClick={goToEditMode} />\r\n\r\n  const { Text } = Typography\r\n\r\n  return (\r\n    <div>\r\n      <Tabs tabBarExtraContent={operations}>\r\n        <TabPane tab='Information' key='1'>\r\n          <div>\r\n            <Text strong>Looking for a job </Text>: {profile.lookingForAJob ? 'yes' : 'no'}\r\n          </div>\r\n          {profile.lookingForAJob && (\r\n            <div>\r\n              <Text strong>My professional skills </Text>: {profile.lookingForAJobDescription}\r\n            </div>\r\n          )}\r\n          <div>\r\n            <Text strong>About me</Text>: {profile.aboutMe}\r\n          </div>\r\n        </TabPane>\r\n        <TabPane tab='Contacts' key='2'>\r\n          <div>\r\n            {Object.keys(profile.contacts).map((key) => {\r\n              return (\r\n                <Contact\r\n                  key={key}\r\n                  contactTitle={key}\r\n                  contactValue={profile.contacts[key as keyof ContactsType]}\r\n                />\r\n              )\r\n            })}\r\n          </div>\r\n        </TabPane>\r\n      </Tabs>\r\n    </div>\r\n  )\r\n}\r\ntype ContactsPropsType = {\r\n  contactTitle: string\r\n  contactValue: string\r\n}\r\nconst Contact: React.FC<ContactsPropsType> = ({ contactTitle, contactValue }) => {\r\n  const { Text } = Typography\r\n  return (\r\n    <div className={s.contact}>\r\n      <Text strong>{contactTitle}</Text>: {contactValue}\r\n    </div>\r\n  )\r\n}\r\nexport default ProfileInfo\r\n","import React from 'react';\r\nimport { ProfileType } from '../../types/types';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\n\r\ntype PropsType = {\r\n  profile: ProfileType | null;\r\n  status: string;\r\n  updateStatus: (status: string) => void;\r\n  isOwner: boolean;\r\n  savePhoto: (file: File) => void;\r\n  saveProfile: (profile: ProfileType) => Promise<any>;\r\n};\r\nconst Profile: React.FC<PropsType> = (props) => {\r\n  return (\r\n    <div>\r\n      <ProfileInfo\r\n        savePhoto={props.savePhoto}\r\n        isOwner={props.isOwner}\r\n        profile={props.profile}\r\n        status={props.status}\r\n        saveProfile={props.saveProfile}\r\n        updateStatus={props.updateStatus}\r\n      />\r\n      <MyPostsContainer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Profile from './Profile';\r\nimport {\r\n  getStatus,\r\n  getUserProfile,\r\n  updateStatus,\r\n  savePhoto,\r\n  saveProfile,\r\n} from '../../redux/profile-reducer';\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\nimport { withRouter } from '../../hoc/withRouter';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport { ProfileType } from '../../types/types';\r\nimport { History } from 'history';\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>;\r\ntype DispatchPropsType = {\r\n  getUserProfile: (userId: number) => void;\r\n  getStatus: (userId: number) => void;\r\n  updateStatus: (status: string) => void;\r\n  savePhoto: (file: File) => void;\r\n  saveProfile: (profile: ProfileType) => Promise<any>;\r\n};\r\n\r\ntype PathParamsType = {\r\n  router: any;\r\n  history: History;\r\n};\r\n\r\ntype PropsType = MapPropsType & DispatchPropsType & PathParamsType;\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n  constructor(props: PropsType) {\r\n    super(props);\r\n  }\r\n  refreshProfile() {\r\n    let userId: number | null = +this.props.router.params.userId;\r\n    if (!userId) {\r\n      userId = this.props.authorizedUserId;\r\n      if (!userId) {\r\n        this.props.history.push('/login');\r\n      }\r\n    }\r\n    if (!userId) {\r\n      console.error(\"ID should exist in URI params or in state('authorizedUserId')\");\r\n    } else {\r\n      this.props.getUserProfile(userId);\r\n      this.props.getStatus(userId);\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.refreshProfile();\r\n  }\r\n\r\n  componentDidUpdate(prevProps: PropsType, prevState: PropsType) {\r\n    if (this.props.router.params.userId != prevProps.router.params.userId) this.refreshProfile();\r\n  }\r\n\r\n  componentWillUnmount(): void {}\r\n\r\n  render() {\r\n    return (\r\n      <Profile\r\n        {...this.props}\r\n        isOwner={!this.props.router.params.userId}\r\n        profile={this.props.profile}\r\n        status={this.props.status}\r\n        updateStatus={this.props.updateStatus}\r\n        savePhoto={this.props.savePhoto}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n  return {\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth,\r\n  };\r\n};\r\nexport default compose<React.ComponentType>(\r\n  connect(mapStateToProps, {\r\n    getUserProfile,\r\n    getStatus,\r\n    updateStatus,\r\n    savePhoto,\r\n    saveProfile,\r\n  }),\r\n  withRouter,\r\n  withAuthRedirect,\r\n)(ProfileContainer);\r\n","import { AppStateType } from '../redux/redux-store'\r\nimport React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Navigate } from 'react-router-dom'\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) =>\r\n  ({\r\n    isAuth: state.auth.isAuth,\r\n  } as MapPropsType)\r\n\r\ntype MapPropsType = {\r\n  isAuth: boolean\r\n}\r\ntype DispatchPropsType = {}\r\n\r\nexport function withAuthRedirect<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n  const RedirectComponent: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n    let { isAuth, ...restProps } = props\r\n    if (!isAuth) return <Navigate to='/login' />\r\n    //@ts-ignore\r\n    return <WrappedComponent {...(restProps as WCP)} />\r\n  }\r\n\r\n  let ConnectedAuthRedirectComponent = connect<MapPropsType, DispatchPropsType, WCP, AppStateType>(\r\n    mapStateToPropsForRedirect,\r\n    {},\r\n  )(RedirectComponent)\r\n  return ConnectedAuthRedirectComponent\r\n}\r\n"],"names":["reduxForm","form","props","onSubmit","handleSubmit","createField","Textarea","htmlType","style","margin","useState","likes","setLikes","dislikes","setDislikes","action","setAction","actions","title","onClick","createElement","LikeFilled","LikeOutlined","className","React","DislikeFilled","DislikeOutlined","small","useSelector","getProfilePhoto","name","getUserName","author","avatar","content","message","datetime","moment","format","fromNow","MyPosts","postsElements","posts","reverse","map","p","id","getProfile","s","values","newPostText","addPost","connect","state","profilePage","editMode","setEditMode","status","setStatus","useEffect","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","profile","error","Text","Typography","strong","Input","type","Object","keys","contacts","key","ProfileData","goToEditMode","isOwner","TabPane","Tabs","operations","EditOutlined","tabBarExtraContent","tab","lookingForAJob","lookingForAJobDescription","aboutMe","Contact","contactTitle","contactValue","savePhoto","saveProfile","Title","size","fullName","target","files","length","console","log","src","photos","large","userPhoto","htmlFor","initialValues","formData","then","ProfileContainer","userId","this","router","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","compose","auth","isAuth","withRouter","withAuthRedirect","mapStateToPropsForRedirect","WrappedComponent","restProps","to"],"sourceRoot":""}