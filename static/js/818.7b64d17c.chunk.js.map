{"version":3,"file":"static/js/818.7b64d17c.chunk.js","mappings":"mNAkBMA,EAAiB,WACrB,IAAMC,GAAWC,EAAAA,EAAAA,MAEXC,GAASC,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKH,UAQ/D,OAPAI,EAAAA,EAAAA,YAAU,WAER,OADAN,GAASO,EAAAA,EAAAA,OACF,WACLP,GAASQ,EAAAA,EAAAA,UAEV,KAGD,2BACc,UAAXN,IAAsB,0EACvB,iCACE,SAACO,EAAD,KACA,SAACC,EAAD,WAMFD,EAAyB,SAAC,ICxCjB,SAAmCE,GAChD,GAAW,MAAPA,EAAa,MAAM,IAAIC,UAAU,gCDuCC,IACtC,IAAMC,GAAWV,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKQ,YAC3DC,GAAoBC,EAAAA,EAAAA,QAAuB,MACjD,GAAwCC,EAAAA,EAAAA,WAAS,GAAjD,eAAOC,EAAP,KAAqBC,EAArB,KAkBA,OAPAZ,EAAAA,EAAAA,YAAU,WACJW,GACgC,OAA9BH,EAAkBK,SACpBL,EAAkBK,QAAQC,eAAe,CAAEC,SAAU,aAGxD,CAACR,KAEF,iBAAKS,MAAO,CAAEC,OAAQ,QAASC,UAAW,QAAUC,SAjBhC,SAACC,GACrB,IAAMC,EAAUD,EAAEE,cACdC,KAAKC,IAAIH,EAAQI,aAAeJ,EAAQK,UAAYL,EAAQM,cAAgB,KAC7EhB,GAAgBC,GAAgB,IAEhCD,GAAgBC,GAAgB,IAYnC,UACGL,EAASqB,KAAI,SAACC,EAAGC,GAAJ,OACZ,SAACC,EAAD,CAAoBC,QAASH,GAAfA,EAAEI,QAElB,gBAAKC,IAAK1B,QAKVuB,EAAqDI,EAAAA,MAAW,YAAkB,IAAfH,EAAc,EAAdA,QACvE,OACE,4BACE,gBAAKI,IAAKJ,EAAQK,MAAOrB,MAAO,CAAEsB,MAAO,WACzC,uBAAIN,EAAQO,YACZ,kBACCP,EAAQA,SACT,wBAKA5B,EAA+B,WACnC,OAA8BM,EAAAA,EAAAA,UAAS,IAAvC,eAAOsB,EAAP,KAAgBQ,EAAhB,KAEM9C,GAAWC,EAAAA,EAAAA,MAEXC,GAASC,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKH,UAW/D,OACE,4BACE,0BACE,qBAAU6C,SAAU,SAACrB,GAAD,OAAOoB,EAAWpB,EAAEE,cAAcoB,QAAQA,MAAOV,OAEvE,0BACE,mBAAQW,SAAqB,UAAX/C,EAAoBgD,QAfjB,WACpBZ,IAILtC,GAASmD,EAAAA,EAAAA,IAAYb,IACrBQ,EAAW,MASP,wBAQR,EAvG2B,WACzB,OACE,0BACE,SAAC/C,EAAD","sources":["pages/Chat/ChatPage.tsx","../node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { ChatMessageAPIType } from '../../api/chat-api';\r\nimport {\r\n  sendMessage,\r\n  startMessagesListening,\r\n  stopMessagesListening,\r\n} from '../../redux/chat-reducer';\r\nimport { AppStateType } from '../../redux/redux-store';\r\n\r\nconst ChatPage: React.FC = () => {\r\n  return (\r\n    <div>\r\n      <Chat />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Chat: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const status = useSelector((state: AppStateType) => state.chat.status);\r\n  useEffect(() => {\r\n    dispatch(startMessagesListening());\r\n    return () => {\r\n      dispatch(stopMessagesListening());\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      {status === 'error' && <div>Some error occured. Please refresh the page</div>}\r\n      <>\r\n        <Messages />\r\n        <AddMessageForm />\r\n      </>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Messages: React.FC<{}> = ({}) => {\r\n  const messages = useSelector((state: AppStateType) => state.chat.messages);\r\n  const messagesAnchorRef = useRef<HTMLDivElement>(null);\r\n  const [isAutoScroll, setIsAutoScroll] = useState(true);\r\n\r\n  const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n    const element = e.currentTarget;\r\n    if (Math.abs(element.scrollHeight - element.scrollTop - element.clientHeight) < 300) {\r\n      !isAutoScroll && setIsAutoScroll(true);\r\n    } else {\r\n      !isAutoScroll && setIsAutoScroll(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isAutoScroll) {\r\n      if (messagesAnchorRef.current !== null) {\r\n        messagesAnchorRef.current.scrollIntoView({ behavior: 'smooth' });\r\n      }\r\n    }\r\n  }, [messages]);\r\n  return (\r\n    <div style={{ height: '400px', overflowY: 'auto' }} onScroll={scrollHandler}>\r\n      {messages.map((m, index) => (\r\n        <Message key={m.id} message={m} />\r\n      ))}\r\n      <div ref={messagesAnchorRef}></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Message: React.FC<{ message: ChatMessageAPIType }> = React.memo(({ message }) => {\r\n  return (\r\n    <div>\r\n      <img src={message.photo} style={{ width: '30px' }} />\r\n      <b>{message.userName}</b>\r\n      <br />\r\n      {message.message}\r\n      <hr />\r\n    </div>\r\n  );\r\n});\r\n\r\nconst AddMessageForm: React.FC<{}> = () => {\r\n  const [message, setMessage] = useState('');\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const status = useSelector((state: AppStateType) => state.chat.status);\r\n\r\n  const sendMessageHandler = () => {\r\n    if (!message) {\r\n      return;\r\n    }\r\n\r\n    dispatch(sendMessage(message));\r\n    setMessage('');\r\n  };\r\n  debugger;\r\n  return (\r\n    <div>\r\n      <div>\r\n        <textarea onChange={(e) => setMessage(e.currentTarget.value)} value={message}></textarea>\r\n      </div>\r\n      <div>\r\n        <button disabled={status !== 'ready'} onClick={sendMessageHandler}>\r\n          Send\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatPage;\r\n","export default function _objectDestructuringEmpty(obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure undefined\");\n}"],"names":["Chat","dispatch","useDispatch","status","useSelector","state","chat","useEffect","startMessagesListening","stopMessagesListening","Messages","AddMessageForm","obj","TypeError","messages","messagesAnchorRef","useRef","useState","isAutoScroll","setIsAutoScroll","current","scrollIntoView","behavior","style","height","overflowY","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","index","Message","message","id","ref","React","src","photo","width","userName","setMessage","onChange","value","disabled","onClick","sendMessage"],"sourceRoot":""}